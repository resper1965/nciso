/**
 * üõ°Ô∏è n.CISO - Configura√ß√£o de Certificados SSL
 * 
 * Configura√ß√£o para certificados SSL customizados do Supabase
 */

const fs = require('fs')
const path = require('path')
const https = require('https')

/**
 * üìÅ Estrutura de Diret√≥rios para Certificados
 */
const CERT_DIR = path.join(__dirname, '../../certs')
const SSL_CONFIG = {
  // Diret√≥rios de certificados
  certPath: path.join(CERT_DIR, 'supabase.crt'),
  keyPath: path.join(CERT_DIR, 'supabase.key'),
  caPath: path.join(CERT_DIR, 'ca.crt'),
  
  // Configura√ß√µes SSL
  sslOptions: {
    rejectUnauthorized: true,
    secureProtocol: 'TLSv1_2_method'
  }
}

/**
 * üîç Verificar se certificados existem
 */
function checkCertificates() {
  console.log('üîç Verificando certificados SSL...')
  
  const checks = [
    { name: 'Certificado (.crt)', path: SSL_CONFIG.certPath },
    { name: 'Chave privada (.key)', path: SSL_CONFIG.keyPath },
    { name: 'CA Bundle (.crt)', path: SSL_CONFIG.caPath }
  ]
  
  checks.forEach(check => {
    if (fs.existsSync(check.path)) {
      console.log(`   ‚úÖ ${check.name}: Encontrado`)
    } else {
      console.log(`   ‚ùå ${check.name}: N√£o encontrado`)
    }
  })
  
  return checks.every(check => fs.existsSync(check.path))
}

/**
 * üìã Criar estrutura de diret√≥rios
 */
function createCertificateStructure() {
  console.log('üìÅ Criando estrutura de certificados...')
  
  // Criar diret√≥rio de certificados
  if (!fs.existsSync(CERT_DIR)) {
    fs.mkdirSync(CERT_DIR, { recursive: true })
    console.log('   ‚úÖ Diret√≥rio de certificados criado')
  } else {
    console.log('   ‚úÖ Diret√≥rio de certificados j√° existe')
  }
  
  // Criar arquivo .gitignore para certificados
  const gitignorePath = path.join(CERT_DIR, '.gitignore')
  if (!fs.existsSync(gitignorePath)) {
    fs.writeFileSync(gitignorePath, `# Certificados SSL
*.crt
*.key
*.pem
*.p12
*.pfx
ca.crt
supabase.crt
supabase.key
`)
    console.log('   ‚úÖ .gitignore criado para certificados')
  }
  
  // Criar README para certificados
  const readmePath = path.join(CERT_DIR, 'README.md')
  if (!fs.existsSync(readmePath)) {
    fs.writeFileSync(readmePath, `# üîê Certificados SSL

## üìã Estrutura de Arquivos

Coloque seus certificados SSL aqui:

- \`supabase.crt\` - Certificado do servidor
- \`supabase.key\` - Chave privada
- \`ca.crt\` - Certificado da autoridade certificadora

## ‚ö†Ô∏è Seguran√ßa

- **NUNCA** commite certificados no git
- Mantenha as chaves privadas seguras
- Use vari√°veis de ambiente para produ√ß√£o

## üîß Como Configurar

1. Obtenha os certificados do Supabase
2. Coloque os arquivos neste diret√≥rio
3. Configure as permiss√µes adequadas
4. Teste a conex√£o SSL

## üß™ Teste

\`\`\`bash
npm run test:ssl
\`\`\`
`)
    console.log('   ‚úÖ README criado para certificados')
  }
}

/**
 * üîê Configurar certificados para cliente HTTPS
 */
function createSSLAgent() {
  try {
    // Verificar se certificados existem
    if (!checkCertificates()) {
      console.log('‚ö†Ô∏è  Certificados n√£o encontrados, usando configura√ß√£o padr√£o')
      return null
    }
    
    // Criar agente HTTPS com certificados customizados
    const sslAgent = new https.Agent({
      cert: fs.readFileSync(SSL_CONFIG.certPath),
      key: fs.readFileSync(SSL_CONFIG.keyPath),
      ca: fs.readFileSync(SSL_CONFIG.caPath),
      rejectUnauthorized: true
    })
    
    console.log('‚úÖ Agente HTTPS criado com certificados customizados')
    return sslAgent
    
  } catch (error) {
    console.log(`‚ùå Erro ao criar agente HTTPS: ${error.message}`)
    return null
  }
}

/**
 * üîß Configurar cliente Supabase com certificados customizados
 */
function createSupabaseClientWithCertificates() {
  const sslAgent = createSSLAgent()
  
  if (!sslAgent) {
    console.log('‚ö†Ô∏è  Usando configura√ß√£o SSL padr√£o do Supabase')
    return null
  }
  
  // Retornar configura√ß√£o para cliente customizado
  return {
    agent: sslAgent,
    rejectUnauthorized: true,
    secureProtocol: 'TLSv1_2_method'
  }
}

/**
 * üìã Instru√ß√µes para configurar certificados
 */
function showCertificateInstructions() {
  console.log('üìã Instru√ß√µes para configurar certificados SSL:')
  console.log('')
  console.log('1. üìÅ Estrutura de diret√≥rios:')
  console.log(`   ${CERT_DIR}/`)
  console.log('   ‚îú‚îÄ‚îÄ supabase.crt    # Certificado do servidor')
  console.log('   ‚îú‚îÄ‚îÄ supabase.key    # Chave privada')
  console.log('   ‚îú‚îÄ‚îÄ ca.crt          # Certificado CA')
  console.log('   ‚îú‚îÄ‚îÄ .gitignore      # Ignorar certificados')
  console.log('   ‚îî‚îÄ‚îÄ README.md       # Instru√ß√µes')
  console.log('')
  console.log('2. üîê Obter certificados:')
  console.log('   - Acesse o painel do Supabase')
  console.log('   - V√° em Settings > Database')
  console.log('   - Baixe os certificados SSL')
  console.log('')
  console.log('3. üîß Configurar permiss√µes:')
  console.log('   chmod 600 certs/*.key')
  console.log('   chmod 644 certs/*.crt')
  console.log('')
  console.log('4. üß™ Testar configura√ß√£o:')
  console.log('   npm run test:ssl')
  console.log('')
  console.log('‚ö†Ô∏è  IMPORTANTE:')
  console.log('   - NUNCA commite certificados no git')
  console.log('   - Use vari√°veis de ambiente em produ√ß√£o')
  console.log('   - Mantenha as chaves privadas seguras')
}

/**
 * üîç Verificar configura√ß√£o SSL atual
 */
async function checkCurrentSSL() {
  console.log('üîç Verificando configura√ß√£o SSL atual...')
  
  try {
    const https = require('https')
    const url = require('url')
    
    const supabaseUrl = process.env.SUPABASE_URL || 'https://pszfqqmmljekibmcgmig.supabase.co'
    const parsedUrl = url.parse(supabaseUrl)
    
    const options = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port || 443,
      path: '/',
      method: 'GET',
      rejectUnauthorized: true
    }
    
    const req = https.request(options, (res) => {
      console.log(`   ‚úÖ Status: ${res.statusCode}`)
      console.log(`   ‚úÖ Protocolo: ${res.socket.getProtocol()}`)
      console.log(`   ‚úÖ Cipher: ${res.socket.getCipher()}`)
      console.log(`   ‚úÖ Certificado: ${res.socket.getPeerCertificate().subject.CN}`)
    })
    
    req.on('error', (error) => {
      console.log(`   ‚ùå Erro SSL: ${error.message}`)
    })
    
    req.end()
    
  } catch (error) {
    console.log(`   ‚ùå Erro ao verificar SSL: ${error.message}`)
  }
}

module.exports = {
  SSL_CONFIG,
  checkCertificates,
  createCertificateStructure,
  createSSLAgent,
  createSupabaseClientWithCertificates,
  showCertificateInstructions,
  checkCurrentSSL
} 